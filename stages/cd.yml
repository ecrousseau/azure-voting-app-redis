parameters:
- name: resourceGroup
  type: string
- name: aksCluster
  type: string
- name: serviceConnection
  type: string
- name: teamEmail
  type: string
- name: containerRegistry
  type: string
- name: containerRepository
  type: string
- name: kubernetesNamespace
  type: string
  
#get artifact
#create imagepullsecret
#deploy, overriding container and secret

stages:
- stage: CD
  dependsOn: CI
  jobs:
  - deployment: DeployToAKS
    displayName: Deploy to AKS
    environment: aks
    variables:
      manifestName: $[ stageDependencies.CI.BuildAndPush.outputs['ManifestName.value'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - pwsh: |  # imagepull secret, override container and secret
              ls
              ls *
              ls *\*
          #- task: AzureCLI@2
          #  displayName: Get AKS and ACR credentials
          #  inputs:
          #    azureSubscription: ${{ parameters.serviceConnection }}
          #    scriptType: bash
          #    scriptLocation: inlineScript
          #    inlineScript: |
          #      az aks get-credentials --resource-group ${{ parameters.resourceGroup }} --name ${{ parameters.aksCluster }}
          #      acrUsername=$(az acr credential show --name ${{ parameters.containerRegistry }} --query username --output tsv)
          #      acrPassword=$(az acr credential show --name ${{ parameters.containerRegistry }} --query passwords[0].value --output tsv)
          #      kubectl create secret docker-registry image-pull-secret \
          #        --docker-server=${{ parameters.containerRegistry }} \
          #        --docker-username=$acrUsername \
          #        --docker-password=$acrPassword \
          #        --docker-email=${{ parameters.teamEmail }} \
          #        --namespace=${{ parameters.kubernetesNamespace }}
          - task: Kubernetes@1
            displayName: Create namespace
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
              azureResourceGroup: ${{ parameters.resourceGroup }}
              kubernetesCluster: ${{ parameters.aksCluster }}
              command: create
              arguments: namespace azure-vote
          - task: Kubernetes@1
            displayName: Apply manifest
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
              azureResourceGroup: ${{ parameters.resourceGroup }}
              kubernetesCluster: ${{ parameters.aksCluster }}
              namespace: azure-vote
              command: apply
              arguments: -f $(manifestName)
              secretType: dockerRegistry
              containerRegistryType: Azure Container Registry
              azureSubscriptionEndpointForSecrets: ${{ parameters.serviceConnection }}
              azureContainerRegistry: ${{ parameters.containerRegistry }}
              secretName: image-pull-secret
              forceUpdate: true